//ordered dict approach(recommended)

from collections import OrderedDict

class LRUCache:
    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = OrderedDict()

    def get(self, key: int) -> int:
        if key not in self.cache:
            return -1
        else:
            # Move the accessed key to the end to mark it as most recently used
            self.cache.move_to_end(key)
            return self.cache[key]

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            # Update the value and move the key to the end
            self.cache[key] = value
            self.cache.move_to_end(key)
        else:
            # Check if the cache is full
            if len(self.cache) >= self.capacity:
                # Remove the least recently used key (first item in OrderedDict)
                self.cache.popitem(last=False)

            # Add the new key-value pair to the cache
            self.cache[key] = value


//dll approach

class Node:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.prev = None
        self.next = None

class LRUCache:
    def __init__(self, capacity):
        # Capacity of the LRUCache
        self.capacity = capacity

        # Hash map for quick lookups (key to node mapping)
        self.cache = {}

        # Dummy head node
        self.head = Node(0, 0)

        # Dummy tail node
        self.tail = Node(0, 0)

        # Connect head and tail to create an empty doubly linked list
        self.head.next = self.tail
        self.tail.prev = self.head

    def _add_node_after_head(self, node):
        # Add a node after the dummy head node
        node.prev = self.head
        node.next = self.head.next
        self.head.next.prev = node
        self.head.next = node

    def _remove_node(self, node):
        # Remove a node from the doubly linked list
        node.prev.next = node.next
        node.next.prev = node.prev

    def get(self, key):
        if key in self.cache:
            # Move the accessed key to the front (most recently used)
            node = self.cache[key]
            self._remove_node(node)
            self._add_node_after_head(node)
            return node.value
        else:
            return -1

    def put(self, key, value):
        if key in self.cache:
            # Update the value and move the key to the front
            node = self.cache[key]
            node.value = value
            self._remove_node(node)
            self._add_node_after_head(node)
        else:
            if len(self.cache) >= self.capacity:
                # Evict the least recently used node (from the end)
                least_recently_used = self.tail.prev
                self._remove_node(least_recently_used)
                del self.cache[least_recently_used.key]

            # Add the new node to the front
            new_node = Node(key, value)
            self._add_node_after_head(new_node)
            self.cache[key] = new_node



